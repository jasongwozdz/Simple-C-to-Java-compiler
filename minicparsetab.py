
# minicparsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftEQLEleftPLUSMINUSleftTIMESDIVIDEDIVIDE ELSE EQ FLOAT FLOAT_TYPE FOR ID IF INTEGER INTEGER_TYPE LE MINUS NOT PLUS PRINT STRING STRING_TYPE TIMES WHILE\n    program : stmt_list\n    \n    stmt_list : stmt stmt_list\n              | empty\n    \n    stmt : data_type ID opt_init semi\n    \n    stmt : storable '=' exp semi\n    \n    stmt : PRINT '(' exp ')' semi\n    \n    stmt : WHILE '(' exp ')' stmt\n    \n    stmt : IF '(' exp ')' stmt opt_else\n    \n    stmt : '{' stmt_list '}'\n    \n    stmt : FOR '(' data_type ID opt_init ';' exp ';' exp ')' '{' stmt_list '}'\n    \n    data_type : primitive_type\n    \n    primitive_type : INTEGER_TYPE\n    \n    primitive_type : FLOAT_TYPE\n    \n    primitive_type :  STRING_TYPE\n    \n    opt_init : '=' exp\n    \n    opt_init : empty\n    \n    opt_actual_args : actual_args\n                    | empty\n    \n    actual_args : exp ',' actual_args\n                | exp\n    \n    opt_else : ELSE stmt\n             | empty\n    \n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp TIMES exp\n        | exp DIVIDE exp\n        | exp EQ exp\n        | exp LE exp\n    \n    exp : INTEGER\n    \n    exp : FLOAT\n    \n    exp : STRING\n    \n    exp : storable\n    \n    exp : ID '(' opt_actual_args ')'\n    \n    exp : '(' exp ')'\n    \n    storable : ID\n    \n    semi : ';'\n    \n    empty :\n    "
    
_lr_action_items = {'PRINT':([0,3,11,38,40,41,43,53,54,67,68,69,73,74,75,78,83,85,],[8,8,8,-9,-4,-36,-5,8,8,-6,-7,-37,-8,8,-22,-21,8,-10,]),'WHILE':([0,3,11,38,40,41,43,53,54,67,68,69,73,74,75,78,83,85,],[9,9,9,-9,-4,-36,-5,9,9,-6,-7,-37,-8,9,-22,-21,9,-10,]),'IF':([0,3,11,38,40,41,43,53,54,67,68,69,73,74,75,78,83,85,],[10,10,10,-9,-4,-36,-5,10,10,-6,-7,-37,-8,10,-22,-21,10,-10,]),'{':([0,3,11,38,40,41,43,53,54,67,68,69,73,74,75,78,82,83,85,],[11,11,11,-9,-4,-36,-5,11,11,-6,-7,-37,-8,11,-22,-21,83,11,-10,]),'FOR':([0,3,11,38,40,41,43,53,54,67,68,69,73,74,75,78,83,85,],[12,12,12,-9,-4,-36,-5,12,12,-6,-7,-37,-8,12,-22,-21,12,-10,]),'$end':([0,1,2,3,4,17,38,40,41,43,67,68,69,73,75,78,85,],[-37,0,-1,-37,-3,-2,-9,-4,-36,-5,-6,-7,-37,-8,-22,-21,-10,]),'ID':([0,3,5,11,13,14,15,16,19,20,21,22,26,34,38,39,40,41,43,44,45,46,47,48,49,50,53,54,67,68,69,72,73,74,75,76,78,80,83,85,],[6,6,18,6,-11,-12,-13,-14,33,33,33,33,33,33,-9,55,-4,-36,-5,33,33,33,33,33,33,33,6,6,-6,-7,-37,33,-8,6,-22,33,-21,33,6,-10,]),'INTEGER_TYPE':([0,3,11,24,38,40,41,43,53,54,67,68,69,73,74,75,78,83,85,],[14,14,14,14,-9,-4,-36,-5,14,14,-6,-7,-37,-8,14,-22,-21,14,-10,]),'FLOAT_TYPE':([0,3,11,24,38,40,41,43,53,54,67,68,69,73,74,75,78,83,85,],[15,15,15,15,-9,-4,-36,-5,15,15,-6,-7,-37,-8,15,-22,-21,15,-10,]),'STRING_TYPE':([0,3,11,24,38,40,41,43,53,54,67,68,69,73,74,75,78,83,85,],[16,16,16,16,-9,-4,-36,-5,16,16,-6,-7,-37,-8,16,-22,-21,16,-10,]),'}':([3,4,11,17,23,38,40,41,43,67,68,69,73,75,78,83,84,85,],[-37,-3,-37,-2,38,-9,-4,-36,-5,-6,-7,-37,-8,-22,-21,-37,85,-10,]),'=':([6,7,18,55,],[-35,19,26,26,]),'(':([8,9,10,12,19,20,21,22,26,33,34,44,45,46,47,48,49,50,72,76,80,],[20,21,22,24,34,34,34,34,34,50,34,34,34,34,34,34,34,34,34,34,34,]),';':([18,25,27,28,29,30,31,32,33,42,52,55,56,57,58,59,60,61,66,70,71,79,],[-37,41,-16,-32,41,-29,-30,-31,-35,-15,41,-37,-23,-24,-25,-26,-27,-28,-34,76,-33,80,]),'INTEGER':([19,20,21,22,26,34,44,45,46,47,48,49,50,72,76,80,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'FLOAT':([19,20,21,22,26,34,44,45,46,47,48,49,50,72,76,80,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'STRING':([19,20,21,22,26,34,44,45,46,47,48,49,50,72,76,80,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'PLUS':([28,29,30,31,32,33,35,36,37,42,51,56,57,58,59,60,61,65,66,71,79,81,],[-32,44,-29,-30,-31,-35,44,44,44,44,44,-23,-24,-25,-26,44,44,44,-34,-33,44,44,]),'MINUS':([28,29,30,31,32,33,35,36,37,42,51,56,57,58,59,60,61,65,66,71,79,81,],[-32,45,-29,-30,-31,-35,45,45,45,45,45,-23,-24,-25,-26,45,45,45,-34,-33,45,45,]),'TIMES':([28,29,30,31,32,33,35,36,37,42,51,56,57,58,59,60,61,65,66,71,79,81,],[-32,46,-29,-30,-31,-35,46,46,46,46,46,46,46,-25,-26,46,46,46,-34,-33,46,46,]),'DIVIDE':([28,29,30,31,32,33,35,36,37,42,51,56,57,58,59,60,61,65,66,71,79,81,],[-32,47,-29,-30,-31,-35,47,47,47,47,47,47,47,-25,-26,47,47,47,-34,-33,47,47,]),'EQ':([28,29,30,31,32,33,35,36,37,42,51,56,57,58,59,60,61,65,66,71,79,81,],[-32,48,-29,-30,-31,-35,48,48,48,48,48,-23,-24,-25,-26,-27,-28,48,-34,-33,48,48,]),'LE':([28,29,30,31,32,33,35,36,37,42,51,56,57,58,59,60,61,65,66,71,79,81,],[-32,49,-29,-30,-31,-35,49,49,49,49,49,-23,-24,-25,-26,-27,-28,49,-34,-33,49,49,]),')':([28,30,31,32,33,35,36,37,50,51,56,57,58,59,60,61,62,63,64,65,66,71,77,81,],[-32,-29,-30,-31,-35,52,53,54,-37,66,-23,-24,-25,-26,-27,-28,71,-17,-18,-20,-34,-33,-19,82,]),',':([28,30,31,32,33,56,57,58,59,60,61,65,66,71,],[-32,-29,-30,-31,-35,-23,-24,-25,-26,-27,-28,72,-34,-33,]),'ELSE':([38,40,41,43,67,68,69,73,75,78,85,],[-9,-4,-36,-5,-6,-7,74,-8,-22,-21,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,11,83,],[2,17,23,84,]),'stmt':([0,3,11,53,54,74,83,],[3,3,3,68,69,78,3,]),'empty':([0,3,11,18,50,55,69,83,],[4,4,4,27,64,27,75,4,]),'data_type':([0,3,11,24,53,54,74,83,],[5,5,5,39,5,5,5,5,]),'storable':([0,3,11,19,20,21,22,26,34,44,45,46,47,48,49,50,53,54,72,74,76,80,83,],[7,7,7,28,28,28,28,28,28,28,28,28,28,28,28,28,7,7,28,7,28,28,7,]),'primitive_type':([0,3,11,24,53,54,74,83,],[13,13,13,13,13,13,13,13,]),'opt_init':([18,55,],[25,70,]),'exp':([19,20,21,22,26,34,44,45,46,47,48,49,50,72,76,80,],[29,35,36,37,42,51,56,57,58,59,60,61,65,65,79,81,]),'semi':([25,29,52,],[40,43,67,]),'opt_actual_args':([50,],[62,]),'actual_args':([50,72,],[63,77,]),'opt_else':([69,],[73,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_prog','cuppa5_frontend.py',20),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','cuppa5_frontend.py',27),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','cuppa5_frontend.py',28),
  ('stmt -> data_type ID opt_init semi','stmt',4,'p_stmt_3','cuppa5_frontend.py',48),
  ('stmt -> storable = exp semi','stmt',4,'p_stmt_4','cuppa5_frontend.py',54),
  ('stmt -> PRINT ( exp ) semi','stmt',5,'p_stmt_5','cuppa5_frontend.py',61),
  ('stmt -> WHILE ( exp ) stmt','stmt',5,'p_stmt_9','cuppa5_frontend.py',68),
  ('stmt -> IF ( exp ) stmt opt_else','stmt',6,'p_stmt_10','cuppa5_frontend.py',74),
  ('stmt -> { stmt_list }','stmt',3,'p_stmt_11','cuppa5_frontend.py',80),
  ('stmt -> FOR ( data_type ID opt_init ; exp ; exp ) { stmt_list }','stmt',13,'p_stmt_12','cuppa5_frontend.py',86),
  ('data_type -> primitive_type','data_type',1,'p_data_type_1','cuppa5_frontend.py',97),
  ('primitive_type -> INTEGER_TYPE','primitive_type',1,'p_primitive_type_1','cuppa5_frontend.py',108),
  ('primitive_type -> FLOAT_TYPE','primitive_type',1,'p_primitive_type_2','cuppa5_frontend.py',114),
  ('primitive_type -> STRING_TYPE','primitive_type',1,'p_primitive_type_3','cuppa5_frontend.py',120),
  ('opt_init -> = exp','opt_init',2,'p_opt_init_1','cuppa5_frontend.py',133),
  ('opt_init -> empty','opt_init',1,'p_opt_init_3','cuppa5_frontend.py',139),
  ('opt_actual_args -> actual_args','opt_actual_args',1,'p_opt_actual_args','cuppa5_frontend.py',148),
  ('opt_actual_args -> empty','opt_actual_args',1,'p_opt_actual_args','cuppa5_frontend.py',149),
  ('actual_args -> exp , actual_args','actual_args',3,'p_actual_args','cuppa5_frontend.py',156),
  ('actual_args -> exp','actual_args',1,'p_actual_args','cuppa5_frontend.py',157),
  ('opt_else -> ELSE stmt','opt_else',2,'p_opt_else','cuppa5_frontend.py',169),
  ('opt_else -> empty','opt_else',1,'p_opt_else','cuppa5_frontend.py',170),
  ('exp -> exp PLUS exp','exp',3,'p_exp_1','cuppa5_frontend.py',193),
  ('exp -> exp MINUS exp','exp',3,'p_exp_1','cuppa5_frontend.py',194),
  ('exp -> exp TIMES exp','exp',3,'p_exp_1','cuppa5_frontend.py',195),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_1','cuppa5_frontend.py',196),
  ('exp -> exp EQ exp','exp',3,'p_exp_1','cuppa5_frontend.py',197),
  ('exp -> exp LE exp','exp',3,'p_exp_1','cuppa5_frontend.py',198),
  ('exp -> INTEGER','exp',1,'p_exp_2','cuppa5_frontend.py',204),
  ('exp -> FLOAT','exp',1,'p_exp_3','cuppa5_frontend.py',210),
  ('exp -> STRING','exp',1,'p_exp_4','cuppa5_frontend.py',216),
  ('exp -> storable','exp',1,'p_exp_5','cuppa5_frontend.py',222),
  ('exp -> ID ( opt_actual_args )','exp',4,'p_exp_6','cuppa5_frontend.py',228),
  ('exp -> ( exp )','exp',3,'p_exp_7','cuppa5_frontend.py',234),
  ('storable -> ID','storable',1,'p_storable_1','cuppa5_frontend.py',244),
  ('semi -> ;','semi',1,'p_semi','cuppa5_frontend.py',252),
  ('empty -> <empty>','empty',0,'p_empty','cuppa5_frontend.py',259),
]
